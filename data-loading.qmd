# Data Loading and Preparation {#sec-loading}

## Loading Raw Data

The first step is to populate the database with the required data. These
load scripts are specific to the data provided for Alberta. Different
source data will require modifications to these tools. We are using an
open-source PostgreSQL database to store and process the data.

Tools:

-   [load_alberta/create_db.py](https://github.com/Canadian-Wildlife-Federation/abfishpass/blob/main/src/load_alberta/create_db.py)
    -- this script creates all the necessary database tables
-   [load_alberta/load_alberta.py](https://github.com/Canadian-Wildlife-Federation/abfishpass/blob/main/src/load_alberta/load_alberta.py)
    -- this script uses OGR to load data for Alberta road, rail, trail, and stream networks from a .gdb file into the PostgreSQL database.

### Configuring Fish Species Model Parameters

As a part of the loading scripts a fish species table is created which
contains the fish species of interest for modelling and various
modelling parameters. Before processing the watershed these parameters
should be reviewed and configured as necessary. See
[processing_scripts/load_parameters.py](https://github.com/Canadian-Wildlife-Federation/abfishpass/blob/main/src/processing_scripts/load_parameters.py).

::: callout-note
Currently there is no velocity or channel confinement data. These
parameters are placeholders for when this data is added.
:::

## Watershed Processing

Data preparation and processing is completed by watershed id. Each watershed is processed into a separate schema in the database. The watershed configuration must be specified in the ini file and the configuration to be used provided to the script.

Currently preparation includes:

-   Preprocessing step which loads all the streams from the raw
    datastore into the working schema
-   Loading barrier datasets
-   Snapping barriers to stream network and breaking the stream
    segements at these points
-   Loading fish observation and habitat data

Currently processing includes:

* Preprocessing step which loads all the streams from the raw datastore into the working schema
* Loading barriers from the CABD barrier database
* Computing Modelled Crossings
* Computing Mainstems  
* Computing an elevation values for all stream segments
* Computing a smoothed elevation value for all stream segments
* Compute gradient for each stream vertex based on vertex elevation and elevation 100m upstream.
* Break stream segments at required locations
* Reassign raw elevation, smoothed elevation to stream segments
* Compute segment gradient based on start, end elevation and length
* Load and snap fish stocking and observation data to stream network
* Compute upstream/downstream statistics for stream network, including number of barriers, fish stocking species and fish survey species
* Compute accessibility models based on stream gradient and barriers
* Compute habitat models
* Compute upstream/downstream statistics for modelled crossings

### Main Watershed Processing Script

**Tool: [process_watershed.py](https://github.com/egouge/cwf-alberta/blob/main/src/process_watershed.py)**

The Watershed Processing tool can be used by running the main processing script:

``process_watershed.py -c config.ini [watershedid]``

This script calls and executes a series of individual process scripts (see section below). The ``watershedid`` field must be specified as a section header in the config.ini file. The section must describe the watershed processing details for example:

```
[17010301]
#Berland: 17010301
watershed_id = 17010301
output_schema = ws17010301
fish_observation_data = C:\temp\fishobservationdata.zip
```

##### Input Requirements: {.unnumbered}

- Directory of tif images representing DEM files. All files should have the same projection and resolution.
- A raw streams table with id (uuid), name (varchar), strahler order (integer), watershed_id (varchar), and geometry (linestring) fields. The scripts assume this data is in an equal length projection so the st_length2d(geometry) function returns the length in metres.

##### Output: {.unnumbered}

- A new schema with a streams table, barrier, modelled crossings and other output tables.

:::{.callout-warning}
ALL EXISTING DATA IN THE OUTPUT TABLES WILL BE DELETED.
:::

### Individual Processing Scripts

These scripts are the individual processing scripts that are used for the watershed processing steps.

#### 1. Preprocessing {.unnumbered}

**Tool: [preprocess_watershed.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/preprocess_watershed.py)**

This script creates required database schemas, and loads stream data for the watershed into a working table in this schema.

##### Input Requirements: {.unnumbered}

-   Raw stream network dataset loaded

##### Output: {.unnumbered}

-   A database schema named after the watershed ID
-   A streams table in this schema populated with all streams from the raw dataset

#### 2. Loading Barriers {.unnumbered}

**Tool: [load_and_snap_barriers_cabd.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/load_and_snap_barriers_cabd.py)**

This script loads waterfalls and dam barriers from the CABD database.

##### Input Requirements: {.unnumbered}

-   Access to the CABD database
-   Streams table populated from the preprocessing step

##### Output: {.unnumbered}

-   A new barrier table populated with dam and waterfall barriers from the CABD database
- The barrier table has two geometry fields - the raw field and a snapped field (the geometry snapped to the stream network). The maximum snapping distance is specified in the configuration file (default = 200 m).

#### 3. Compute Modelled Crossings {.unnumbered}

**Tool: [compute_modelled_crossings.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/compute_modelled_crossings.py)**

This script computes modelled crossings, defined as locations where rail, road, or trails cross stream networks (based on feature geometries). Due to data errors, some of these crossings may not actually exists on the ground.

##### Input Requirements: {.unnumbered}

- Streams table populated from the preprocessing step
- Road, rail, and trail data loaded from the [/load_alberta/](https://github.com/egouge/cwf-alberta/tree/main/src/load_alberta) scripts


##### Output: {.unnumbered}

- A new modelled crossings table with a reference to the stream edge the crossing crosses.
- Modelled crossings with ``strahler_order`` >= 6 are classified as ``sub_type`` of bridge and a passability status of ``PASSABLE``
- Updated barriers table that now includes modelled crossing that occur on streams with strahler order < 6

:::{.callout-note}
AEP's Watercourse Crossing Program maintains an inventory of inspections that have been performed by barrier owners under the program. We are currently negotiating a data-sharing agreement that would allow this data to be shared publicly, with some sensitive attributes witheld (e.g., specific ownership).

Barrier inspection points will be matched to corresponding modelled stream crossings using a 150 m distance threshold (i.e., inspections points and modelled points within 150 m of each other will be matched). Unmatched inspection points will be manually review and matched, if possible.
:::

#### 4. Compute Mainstems {.unnumbered}

**Tool: [compute_mainstems.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/compute_mainstems.py)**

This script computes mainstems based on the names of streams and/or longest upstream length.

##### Algorithm {.unnumbered}

Mainstems are computed by starting at the sink node and walking up the network. At any confluence the mainsteam is push up the edge that:

1. Has the same stream name as the current edge
2. If no edges have the same name then any named edge; if there are multiple named edges it picks the edge with the longest path to a headwater
3. If no named edges; then it  picks the edge with the longest path to a headwater.

##### Input Requirements: {.unnumbered}

- Streams table

##### Output: {.unnumbered}

- Three new fields, ``mainstem_id``, ``downstream_route_measure``, and ``upstream_route_measure``, added to the input table. The measure fields are calculated in metres.

#### 5. Assign Raw Z (Elevation) Values {.unnumbered}

**Tool: [assign_raw_z.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/assign_raw_z.py)**

This script "drapes" a stream network over provided DEMs and computes a raw Z (i.e., elevation) value for each vertex in the stream network.

##### Algorithm {.unnumbered}

To compute raw elevation, for each vertex:

1. Drop the vertex on the DEM and determine which 4 cells are the nearest to the point. In the example below the four nearest cells to V are A, B, C, and D.

2. Compute a bilinear interpolated value at this point using the values from cells A, B, C, and D.

```
A = (x1, y2, Az)
B = (x2, y2, Bz)
C = (x1, y1, Cz)
D = (x2, y1, Dz)
V = (x, y, Vz)
    
fxy1 = ((x2 - x) / (x2- x1))*Cz + ((x - x1)/(x2 - x1))*Dz
fxy2 = ((x2 - x) / (x2- x1))*Az + ((x - x1)/(x2 - x1))*Bz
Vz = ((y2 - y) / (y2 - y1))*fxy1 + ((y - y1)/(y2 - y1))*fxy2

+-------------+-------------+
|             |             |
|             |             |
|      A      |      B      |
|             |             |
|             |             |
+-------------+-------------+
|          V  |             |
|             |             |
|      C      |      D      |
|             |             |
|             |             |
+-------------+-------------+
```   

:::{.callout-note}
we assume that the elevation values provided in the DEM represent the elevation at the center point of the cell.
:::

##### Input Requirements: {.unnumbered}

- Directory of .tiff images representing DEM files. All files should have the same projection and resolution.
- Streams table populated from the preprocessing step.

##### Output: {.unnumbered}

- A ``geometry_raw3d`` field added to the stream table that represents the 3d geometry for the segment.

#### 6. Compute Smoothed Z Values {.unnumbered}

**Tool: [smooth_z.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/smooth_z.py)**

Takes a set of stream edges with raw z values and smooths them to enforce that the streams are always flowing down hill.

##### Algorithm {.unnumbered}

The smoothing process ensures streams always flow downhill.

:::{.callout-note}
- This algorithm does not contain any spike detection, so if there is an error in the DEM that causes a significant spike in the stream network this will significantly affect the results.
- Nodes and vertices with no elevation values ``NODATA``, are ignored in the computation of the min/max values.
:::

1. Create a graph of the nodes in the stream network
2. Starting at the sink nodes and walking up the network computing a ``max_elevation`` value for each node. This value is the maximum of the node's raw elevation and the downstream node elevation values
3. Starting at the source nodes and walking down the network compute a ``min_elevation`` value for each node. This value is the minimum of the node's raw elevation values and the upstream node elevation values.
4. For each node assign a smoothed elevation of the the average of the ``max_elevation`` and ``min_elevation``
5. For each edge in the network
  * clip all vertices elevations so they are no smaller or bigger than the z values at the end nodes
  * compute min/max elevations for each vertex then average the results to get smoothed value 

```
 Node  Elevation   Min  Max   Smoothed
  A       12       12   12    12
  B       10       10   10    10
  C       6        6    7     6.5
  D       7        6    7     6.5      
  F       8        8    8     8      
  G       2        2    2     2
  
    A           B 
     \         /
      \       /
       \     /
        C---+
        |      F
        |     / 
        |    /
        D---+
        |
        |
        |
        F
        
```

##### Input Requirements: {.unnumbered}

- Streams table with ``id`` and ``geometry_raw3d`` fields (output from the raw z processing)

##### Output: {.unnumbered}

- A new field, ``geometry_smoothed3d``, added to the input table

#### 7. Compute Vertex Gradients {.unnumbered}

**Tool: [compute_vertex_gradient.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/compute_vertex_gradient.py)**

For every stream vertex, this scripts takes the elevation at that point and the elevation along the mainstem at a point 100m upstream and computes the gradient based on those two elevations.

##### Input Requirements: {.unnumbered}

- Streams table with smoothed elevation values.

##### Output: {.unnumbered}

- A new table (``vertex_gradients``) with a single point for every vertex with a gradient calculated. This table includes both the vertex geometry, upstream geometry and elevation values at both those locations.

#### 8. Break Streams {.unnumbered}

**Tool: [break_streams_at_barriers.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/break_streams_at_barriers.py)**

This script breaks the stream network at "barriers" and recomputes necessary attributes.

##### Algorithm {.unnumbered}

For this script a barrier is considered to be: a cabd barrier (dam, waterfall), all modelled crossings, and the most downstream vertices with a gradient greater than minimum value specified in the ``fish_species`` table for the ``accessibility_gradient`` field in a collection of vertices with gradient values larger than this value.

For example if stream vertices has these gradient classes:

x = gradient > 0.35

o = gradient < 0.35

```
x-----x------o------o------x------x-------x-------o---->

1-----2------3------4------5------6-------7-------8---->
```

Then the stream edge would be split at vertices 2 and 7.

##### Input Requirements: {.unnumbered}

- Streams table with smoothed elevation values

##### Output: {.unnumbered}

- A ``break_points`` table that lists all the locations where the streams were broken
- Updated streams table with mainstem route measures recomputed (in km this time)
- Updated modelled crossings table (``stream_id`` is replaced with a ``stream_id_up`` and ``stream_id_down`` referencing the upstream and downstream edges linked to the point)

#### 9. Re-compute Raw and Smoothed Z Values {.unnumbered}

Recompute z values again based on the raw data so any added vertices can be computed based on the raw data and not interpolated points. Re-run z-value smoothing algorithm.

#### 10. Compute Stream Segment Gradients {.unnumbered}

**Tool: [compute_segment_gradient.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/compute_segment_gradient.py)**

This script computes a stream segment gradient based on the smoothed elevation for the most upstream coordinate, most downstream coordinate, and the length of the stream segment.

##### Input Requirements: {.unnumbered}

- Streams table with smoothed elevation values

##### Output: {.unnumbered}

- Addition of a ``segment_elevation`` field to the streams table

#### 11. Load and Snap Fish Observations {.unnumbered}

**Tool: [load_and_snap_fishobservation.py](https://github.com/egouge/cwf-alberta/blob/main/src/processing_scripts/load_and_snap_fishobservation.py)**

This script loads fish observation data provided and snaps it to the stream network.

##### Input Requirements: {.unnumbered}

- Fish observation data
- Stream network

##### Output: {.unnumbered}

- Addition of three tables: ``fish_aquatic_habitat``, ``fish_stocking``, and ``fish_survey``
